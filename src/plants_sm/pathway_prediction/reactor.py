from abc import ABC, abstractmethod
from typing import List, Union
from pydantic import BaseModel
from plants_sm.pathway_prediction.entities import Molecule
from plants_sm.pathway_prediction.solution import ReactionSolution
from rdkit.Chem import Mol

class Reactor(ABC):
    """
    Abstract base class for chemical reactors.
    Subclasses must implement the `_react` method to define reaction logic.

    Attributes
    ----------
    solutions : List[ReactionSolution], optional
        List of reaction solutions generated by the reactor.
    """

    solutions: List[ReactionSolution] = None

    def react(self, reactants: Union[List[str], List[Mol]]) -> List[ReactionSolution]:
        """
        React a list of reactants and return possible reaction solutions.

        Parameters
        ----------
        reactants : Union[List[str], List[Mol]]
            List of reactant SMILES strings or RDKit Mol objects.

        Returns
        -------
        List[ReactionSolution]
            List of reaction solutions generated from the reactants.
        """
        if isinstance(reactants[0], str):
            for i in range(len(reactants)):
                reactants[i] = Molecule.from_smiles(reactants[i]).mol
        self.solutions = self._react(reactants)
        return self.solutions

    @abstractmethod
    def _react(self, reactants: List[Mol]) -> List[ReactionSolution]:
        """
        Implement the reaction logic for the reactor.

        Parameters
        ----------
        reactants : List[Mol]
            List of RDKit Mol objects representing the reactants.

        Returns
        -------
        List[ReactionSolution]
            List of reaction solutions generated from the reactants.
        """
        pass
