from abc import ABC, abstractmethod
from typing import List, Union
from plants_sm.pathway_prediction.entities import Molecule
from plants_sm.pathway_prediction.reactor import Reactor
from plants_sm.pathway_prediction.solution import ReactionSolution, Solution

class SearcherSolution(Solution):
    """A solution class for pathway search results, containing routes, templates, and reaction details.

    Attributes
    ----------
    route : List[List[Union[None, str]]]
        A list of routes, where each route is a list of molecule identifiers or None.
    template : List[List[Union[None, str]]]
        A list of reaction templates, where each template is a list of template identifiers or None.
    success : List[bool]
        A list indicating whether each search was successful.
    depth : List[int]
        A list of depths for each search result.
    counts : List[int]
        A list of counts for each search result.
    reaction_solutions : List[Union[None, ReactionSolution]]
        A list of reaction solutions or None for each search result.
    """

    def to_csv(self, path: str) -> None:
        """Export the search results to a CSV file.

        Parameters
        ----------
        path : str
            The file path where the CSV will be saved.
        """
        pass

class Searcher(ABC):
    """Abstract base class for pathway searchers.

    Attributes
    ----------
    reactors : List[Reactor]
        A list of reactor instances used for pathway prediction.
    """

    @abstractmethod
    def search(self, molecule: Molecule) -> SearcherSolution:
        """Search for pathways starting from a given molecule.

        Parameters
        ----------
        molecule : Molecule
            The starting molecule for the pathway search.

        Returns
        -------
        SearcherSolution
            The search results, including routes, templates, and reaction details.
        """
        pass

    @abstractmethod
    def run_reactor(self, molecule: Molecule) -> List[ReactionSolution]:
        """Run the reactor on a given molecule to generate possible reactions.

        Parameters
        ----------
        molecule : Molecule
            The input molecule to process.

        Returns
        -------
        List[ReactionSolution]
            A list of reaction solutions generated by the reactor.
        """
        pass
